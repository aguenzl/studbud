{"mappings":"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","sources":["public/scss/components/flowtimetracker.js"],"sourcesContent":["// There are three timers: one for the flow, one for the break and one for the interruptions. First, establish the \r\n// variables for each incremenet of time for each timer. Set it to zero as it needs to start from zero. \r\nlet [flowSeconds,flowMinutes,flowHours] = [0,0,0];\r\nlet [breakSeconds,breakMinutes,breakHours] = [0,0,0];\r\nlet [interruptSeconds,interruptMinutes,interruptHours] = [0,0,0];\r\n\r\n// For each timer there is a button that triggers the corresponding timer to start. \r\n// Establish the state of each button as if it the user had just clicked the button off. \r\nlet flowState = \"endFlow\";\r\nlet breakState = \"endBreak\";\r\nlet interruptState = \"endInterrupt\";\r\n\r\n// Establish the query selector for each button/timer so it returns the element inside the brackets. This refers to \r\n// the code in the html and css - so what actually makes it show up on the screen as well as the stylistic elements.  \r\nlet flowRef = document.querySelector('.flowDisplay');\r\nlet breakRef = document.querySelector('.breakDisplay');\r\nlet interruptRef = document.querySelector('.interruptDisplay');\r\n// Establish the buttons so they return the corresponding element in the html and css. \r\nlet btnFlow = document.getElementById(\"controlFlow\");\r\nlet btnBreak = document.getElementById(\"breakFlow\");\r\nlet btnInterrupt = document.getElementById(\"interruptFlow\");\r\n\r\n\r\n//declare the int variables which hold the 'handle' of each timer interval used. It is set to null as no timer has been started.\r\nlet intFlow = null;\r\nlet intBreak = null;\r\nlet intInterrupt = null;\r\n\r\n//Set the buttons so only the 'Start Flow' button is visible. The user shouldn't be able to log a break or interruption\r\n// if they haven't started the flow yet. \r\nbtnFlow.style.visibility = 'visible';\r\nbtnBreak.style.visibility = 'hidden';\r\nbtnInterrupt.style.visibility = 'hidden';\r\n\r\n// this sets the html contents of each timer on the page. \r\nflowRef.innerHTML = 'Flow = 00 : 00 : 00 ';\r\nbreakRef.innerHTML = 'Break = 00 : 00 : 00 ';\r\ninterruptRef.innerHTML = 'Interruption = 00 : 00 : 00 ';\r\n\r\n// the flow log is the list at the end of the page where the total flow, breaks and interruptions are. the incremenets of  time \r\n// have to be set from zero as that's where the total time will be added to. \r\nlet flowLog = document.querySelector('.flowLog');\r\nlet [totalBreakHours,totalBreakMinutes,totalBreakSeconds] = [0,0,0];\r\nlet [totalInterruptHours,totalInterruptMinutes,totalInterruptSeconds] = [0,0,0];\r\n\r\n// This is where the 'Start Flow'/'End Flow' button gets manipulated. It is called 'controlFlow' as the user controls\r\n// when it starts and stops. \r\ndocument.getElementById('controlFlow').addEventListener('click', ()=>{\r\n // Create an if statement for when 'Start Flow' is selected. When it is selected the colour of the button will \r\n // change from green to the dark blue colour. The name of the button will be changed to \"End Flow\". The break and \r\n // interrupt button will be visible now for the user to select if needed. \r\n    if (flowState == \"endFlow\") {\r\n        flowState = \"startFlow\";\r\n        flowRef.setAttribute(\"style\", \"background-color:green;\");\r\n\r\n        btnFlow.innerText = \"End Flow\";\r\n        btnFlow.setAttribute(\"style\", \"background-color:#242582;\");\r\n        btnBreak.style.visibility = 'visible';\r\n        btnInterrupt.style.visibility = 'visible';\r\n//this wakes up the relevant function - thereby clearing the flow timer specifically \r\n        if(intFlow!==null) { clearInterval(intFlow); }\r\n        intFlow = setInterval(displayFlow,1000);\r\n// the else part refers to when the 'End Flow' button is selected. This means it is displayed as \"Start Flow\". \r\n// The colour is that dark blue colour and the other two buttons are hidden. \r\n    } else if (flowState == \"startFlow\") {\r\n        flowState = \"endFlow\";\r\n        flowRef.setAttribute(\"style\", \"background-color:#242582;\");\r\n        btnFlow.innerText = \"Start Flow\";\r\n        btnInterrupt.style.visibility = 'hidden';\r\n        btnBreak.style.visibility = 'hidden';\r\n        btnFlow.setAttribute(\"style\", \"background-color:green;\");\r\n        clearInterval(intFlow);\r\n // Log the flow and display the results of the three buttons. \r\n        addToFlowLog(\"Flow\", flowHours, flowMinutes, flowSeconds);\r\n        addToFlowLog(\"Total Breaks\", totalBreakHours, totalBreakMinutes, totalBreakSeconds);\r\n        addToFlowLog(\"Total Interruptions\", totalInterruptHours, totalInterruptMinutes, totalInterruptSeconds);\r\n        [flowSeconds,flowMinutes,flowHours] = [0,0,0];\r\n        [totalBreakHours,totalBreakMinutes,totalBreakSeconds] = [0,0,0];\r\n        [totalInterruptHours,totalInterruptMinutes,totalInterruptSeconds] = [0,0,0];\r\n        flowRef.innerHTML = 'Flow = 00 : 00 : 00 ';\r\n    }\r\n});\r\n// This is where the 'Start Break'/'End Break' button gets manipulated. It is called 'breakFlow' as the user intentionally\r\n// breaks the flow. \r\n// Create an if statement for when 'Start Break' is clicked. That means the button would've been on the 'End Break' \r\n// button beforehand. The other two buttons are made invisible and the colour of the button is switched from orange to\r\n// blue. \r\ndocument.getElementById('breakFlow').addEventListener('click', ()=>{\r\n    if (breakState == \"endBreak\") {\r\n        breakState = \"startBreak\";\r\n        btnFlow.style.visibility = 'hidden';\r\n        btnInterrupt.style.visibility = 'hidden';\r\n        flowRef.setAttribute(\"style\", \"background-color:orange;\");\r\n        btnBreak.innerText = \"End Break\";\r\n        btnBreak.setAttribute(\"style\", \"background-color:#242582;\");\r\n        clearInterval(intFlow);\r\n        //this wakes up the relevant function - thereby clearing the break timer specifically \r\n        if(intBreak!==null) { clearInterval(intBreak); }\r\n        intBreak = setInterval(displayBreak,1000);\r\n// otherwise the state of the button is 'Start Break' meaning 'End Break' was clicked. The buttons are visible again \r\n// as it means the flow timer is running again and breaks or interruptions can be logged. The colour is set from dark blue \r\n// back to orange.\r\n    } else if (breakState == \"startBreak\") {\r\n        breakState = \"endBreak\";\r\n        btnFlow.style.visibility = 'visible';\r\n        btnInterrupt.style.visibility = 'visible';\r\n        flowRef.setAttribute(\"style\", \"background-color:#242582;\");\r\n        btnBreak.innerText = \"Start Break\";\r\n        btnBreak.setAttribute(\"style\", \"background-color:orange;\");\r\n        intFlow = setInterval(displayFlow,1000);\r\n        clearInterval(intBreak);\r\n// Log the break so it counts the total hours minutes and seconds of each break.\r\n        addToFlowLog(\"Break\", breakHours, breakMinutes, breakSeconds);\r\n        totalBreakHours = totalBreakHours + breakHours;\r\n        totalBreakMinutes = totalBreakMinutes + breakMinutes;\r\n        totalBreakSeconds = totalBreakSeconds + breakSeconds;\r\n        [breakSeconds,breakMinutes,breakHours] = [0,0,0];\r\n        breakRef.innerHTML = 'Break = 00 : 00 : 00 ';\r\n    }\r\n});\r\n// This is where the 'Start Interruption'/'End Interruption' button gets manipulated. It is called 'InterruptFlow' as the user unintentionally\r\n// breaks the flow. \r\n// Create an if statement for when 'Start Interruption' is clicked. That means the button would've been on the 'End Interruption' \r\n// button beforehand. The other two buttons are made invisible and the colour of the button is switched from red to\r\n// dark blue. \r\ndocument.getElementById('interruptFlow').addEventListener('click', ()=>{\r\n    if (interruptState == \"endInterrupt\") {\r\n        interruptState = \"startInterrupt\";\r\n        btnFlow.style.visibility = 'hidden';\r\n        btnBreak.style.visibility = 'hidden';\r\n        flowRef.setAttribute(\"style\", \"background-color:red;\");\r\n        btnInterrupt.innerText = \"End Interruption\";\r\n        btnInterrupt.setAttribute(\"style\", \"background-color:#242582;\");\r\n        clearInterval(intFlow);\r\n        //this wakes up the relevant function - thereby clearing the interrupt timer specifically \r\n        if(intInterrupt!==null) { clearInterval(intInterrupt); }\r\n        intInterrupt = setInterval(displayInterrupt,1000);\r\n// Otherwise the state of the button is 'Start Interruption' meaning 'End Interruption' was clicked. The buttons are visible again \r\n// as it means the flow timer is running again and breaks or interruptions can be logged. The colour is set from dark blue \r\n// back to red.\r\n    } else if (interruptState == \"startInterrupt\") {\r\n        interruptState = \"endInterrupt\";\r\n        btnFlow.style.visibility = 'visible';\r\n        btnBreak.style.visibility = 'visible';\r\n        flowRef.setAttribute(\"style\", \"background-color:#242582;\");\r\n        btnInterrupt.innerText = \"Start Interruption\";\r\n        btnInterrupt.setAttribute(\"style\", \"background-color:red;\");\r\n        // Resume flow timer when \"End Interruption\" is clicked. \r\n        intFlow = setInterval(displayFlow,1000);\r\n        clearInterval(intInterrupt);\r\n        // Log the total interruption times.\r\n        addToFlowLog(\"Interruption\", interruptHours, interruptMinutes, interruptSeconds);\r\n        totalInterruptHours = totalInterruptHours + interruptHours;\r\n        totalInterruptMinutes = totalInterruptMinutes + interruptMinutes;\r\n        totalInterruptSeconds = totalInterruptSeconds + interruptSeconds;\r\n        [interruptSeconds,interruptMinutes,interruptHours] = [0,0,0];\r\n        interruptRef.innerHTML = 'Interruption = 00 : 00 : 00 ';\r\n    }\r\n});\r\n\r\n// this is to make sure the time is shown correctly. If the number is less than 10, it will have a zero before it. \r\nfunction formatTimeString(h, m, s) {\r\n    let dh = h < 10 ? \"0\" + h : h;\r\n    let dm = m < 10 ? \"0\" + m : m;\r\n    let ds = s < 10 ? \"0\" + s : s;\r\n    return `${dh} : ${dm} : ${ds}`;\r\n}\r\n\r\n// This is for the flow timer. The code runs the loop again after every second. If 60 seconds loop through, \r\n// it adds one to the minute section. If 60 minutes loop through, it adds one to the hour section.\r\nfunction displayFlow(){\r\n    flowSeconds++;\r\n\r\n    if(flowSeconds == 60) {\r\n        flowSeconds = 0;\r\n        flowMinutes++;\r\n        if(flowMinutes == 60){\r\n            flowMinutes = 0;\r\n            flowHours++;\r\n        }\r\n    }\r\n// This makes it so if the hours, minutes or seconds on the flow timer have a value of less than ten, it will put a zero\r\n// before the number as to uphold the clean timer format.\r\n     let fh = flowHours < 10 ? \"0\" + flowHours : flowHours;\r\n    let fm = flowMinutes < 10 ? \"0\" + flowMinutes : flowMinutes;\r\n    let fs = flowSeconds < 10 ? \"0\" + flowSeconds : flowSeconds;\r\n    flowRef.innerHTML = `Flow = ${fh} : ${fm} : ${fs} `;\r\n\r\n    // Format the string so when the 'End Flow' is clicked, the total flow time is displayed.\r\n     flowRef.innerHTML = 'Flow = ' + formatTimeString(flowHours, flowMinutes, flowSeconds);\r\n}\r\n\r\n//This is the same as displayFlow yet it loops round on the break timer. \r\nfunction displayBreak(){\r\n    breakSeconds++;\r\n    if(breakSeconds == 60){\r\n        breakSeconds = 0;\r\n        breakMinutes++;\r\n        if(breakMinutes == 60){\r\n            breakMinutes = 0;\r\n            breakHours++;\r\n        }\r\n    }\r\n// This makes it so if the hours, minutes or seconds on the break timer have a value of less than ten, it will put a zero\r\n// before the number as to uphold the clean timer format.\r\n     let bh = breakHours < 10 ? \"0\" + breakHours : breakHours;\r\n    let bm = breakMinutes < 10 ? \"0\" + breakMinutes : breakMinutes;\r\n    let bs = breakSeconds < 10 ? \"0\" + breakSeconds : breakSeconds;\r\n    breakRef.innerHTML = `Break = ${bh} : ${bm} : ${bs} `;\r\n\r\n        // Format the string so when the 'End Break' is clicked, the time of the break is displayed.\r\n    breakRef.innerHTML = 'Break = ' + formatTimeString(breakHours, breakMinutes, breakSeconds);\r\n}\r\n\r\n//This is the same as displayFlow yet it loops round on the interrupt timer. \r\nfunction displayInterrupt(){\r\n    interruptSeconds++;\r\n    if(interruptSeconds == 60){\r\n        interruptSeconds = 0;\r\n        interruptMinutes++;\r\n        if(interruptMinutes == 60){\r\n            interruptMinutes = 0;\r\n            interruptHours++;\r\n        }\r\n    }\r\n\r\n// This makes it so if the hours, minutes or seconds on the interrupt timer have a value of less than ten, it will put a zero\r\n// before the number as to uphold the clean timer format.\r\n     let ih = interruptHours < 10 ? \"0\" + interruptHours : interruptHours;\r\n    let im = interruptMinutes < 10 ? \"0\" + interruptMinutes : interruptMinutes;\r\n    let is = interruptSeconds < 10 ? \"0\" + interruptSeconds : interruptSeconds;\r\n    interruptRef.innerHTML = `Interruption = ${ih} : ${im} : ${is} `;\r\n        \r\n    // Format the string so when the 'End Interruption' is clicked, the time of the interruption is displayed.\r\n\r\n    interruptRef.innerHTML = 'Interruption = ' + formatTimeString(interruptHours, interruptMinutes, interruptSeconds);\r\n   }\r\n   \r\n   // This is the string to show the entire flow log. It will be displayed as the type (flow, break or interrupt) and the duration afterwards.\r\nfunction addToFlowLog(logType, logHours, logMinutes, logSeconds) {\r\n    flowLog.innerHTML = flowLog.innerHTML + \"<br> \" + logType + \" of duration \" + formatTimeString(logHours, logMinutes, logSeconds);\r\n}\r\n\r\n\r\n// References: Foolish Developer (2021). Create a Simple Stopwatch using JavaScript (Tutorial + Code) https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"],"names":[],"version":3,"file":"flowtimetracker.1ea6d9a8.js.map","sourceRoot":"/__parcel_source_root/"}