{"mappings":"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","sources":["public/scss/components/tasklist.js"],"sourcesContent":["// Basic form DOM elements\r\nconst form = document.getElementById(\"taskform\");\r\nconst button = document.querySelector(\"#taskform > button\")\r\n\r\n// Selector for the tasklist output\r\n// var tasklist = document.querySelector(\"#tasklist > ul\");\r\n var tasklist = document.getElementById(\"tasklist\");\r\n var diagnostic = document.getElementById(\"diagnostic\");\r\n\r\n// DOM elements for the task input fields\r\nvar taskInput = document.getElementById(\"taskInput\");\r\nvar dueDateInput = document.getElementById(\"dueDateInput\");\r\nvar completionTimeInput = document.getElementById(\"completionTimeInput\");\r\nvar estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\r\nvar priorityInput = document.getElementById(\"priorityInput\");\r\n\r\n// Form submission event listener\r\nform.addEventListener(\"submit\", function(event) {\r\n    event.preventDefault();\r\n    let task = taskInput.value;\r\n    let dueDate = dueDateInput.value;\r\n    let completionTime = completionTimeInput.value;\r\n    let estimatedTime = estimatedTimeInput.value;\r\n    let priorityRating = priorityInput.options[priorityInput.selectedIndex].value;\r\n    if (task) {\r\n        addTask(task, dueDate, estimatedTime, priorityRating, completionTime, false);\r\n    }\r\n})\r\n\r\n// Create global array to track tasks\r\nvar taskListArray = [];\r\n\r\n// Function to add task with user inputs as parameters\r\nfunction addTask(taskDescription, dueDate, estimatedTime, priorityRating, completionTime, completionStatus) {\r\n\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> Begin addTask\";\r\n    let d = new Date();\r\n    let dateCreated = d.getFullYear();\r\n    let task = {\r\n        id: Date.now(),\r\n        taskDescription,\r\n        dueDate,\r\n        dateCreated,\r\n        estimatedTime,\r\n        completionTime,\r\n        priorityRating,\r\n        estimatedTime,\r\n        completionStatus\r\n    };\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> About to push task\";\r\n    taskListArray.push(task);\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> About to console log\";\r\n    console.log(taskListArray);\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> About to enter renderTask\";\r\n    renderTask(task);\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> Finished addTask\";\r\n}\r\n\r\n// Function to display task on screen\r\nfunction renderTask(task) {\r\n\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> Starting renderTask\";\r\n\r\n    // Call function - checks if a task has been added\r\n    updateEmpty();\r\n\r\n    // Create HTML elements\r\n    let item = document.createElement(\"li\");\r\n    item.setAttribute('data-id', task.id);\r\n    item.innerHTML = item.innerHTML = \"<p>\" + task.taskDescription + \"</p> <br>\" + \"<p>\" + task.dueDate + \"</p> <br>\" + \"<p>\" + task.estimatedTime + \"</p> <br>\" + \"<p>\" + task.priorityRating + \"</p>\";\r\n\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> About to appendChild\";\r\n\r\n    tasklist.appendChild(item);\r\n\r\n    // Extra Task DOM elements\r\n    let delButton = document.createElement(\"button\");\r\n    let delButtonText = document.createTextNode(\"Delete Task\");\r\n    delButton.appendChild(delButtonText);\r\n    item.appendChild(delButton);\r\n\r\n    // diagnostic.innerHTML = diagnostic.innerHTML + \"<br> About to addEventListener\";\r\n\r\n    // Event Listeners for DOM elements\r\n    delButton.addEventListener(\"click\", function(event) {\r\n        event.preventDefault();\r\n        let id = event.target.parentElement.getAttribute('data-id');\r\n        let index = taskListArray.findIndex(task => task.id === Number(id));\r\n        removeItemFromArray(taskListArray, index)\r\n        console.log(taskListArray);\r\n        updateEmpty();\r\n        item.remove();\r\n    })\r\n\r\n    // Clear the input form\r\n    form.reset();\r\n}\r\n\r\n// Function to remove item from array\r\nfunction removeItemFromArray(arr, index) {\r\n  if (index > -1) {\r\n      arr.splice(index, 1)\r\n  }\r\n  return arr;\r\n}\r\n\r\n\r\n// Function to hide the 'you haven't added any tasks' text\r\nfunction updateEmpty() {\r\n  if (taskListArray.length > 0) {\r\n      document.getElementById('emptyList').style.display = 'none';\r\n  } else {\r\n      document.getElementById('emptyList').style.display = 'block';\r\n  }\r\n}"],"names":[],"version":3,"file":"tasklist.b90b7503.js.map","sourceRoot":"/__parcel_source_root/"}